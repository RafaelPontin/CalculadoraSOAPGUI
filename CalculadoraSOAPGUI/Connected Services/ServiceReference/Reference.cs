//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CalculadoraSOAPGUI.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ICalculoService")]
    public interface ICalculoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculoService/Somar", ReplyAction="http://tempuri.org/ICalculoService/SomarResponse")]
        decimal Somar(decimal num1, decimal num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculoService/Somar", ReplyAction="http://tempuri.org/ICalculoService/SomarResponse")]
        System.Threading.Tasks.Task<decimal> SomarAsync(decimal num1, decimal num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculoService/Subtrair", ReplyAction="http://tempuri.org/ICalculoService/SubtrairResponse")]
        decimal Subtrair(decimal num1, decimal num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculoService/Subtrair", ReplyAction="http://tempuri.org/ICalculoService/SubtrairResponse")]
        System.Threading.Tasks.Task<decimal> SubtrairAsync(decimal num1, decimal num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculoService/Multiplicar", ReplyAction="http://tempuri.org/ICalculoService/MultiplicarResponse")]
        decimal Multiplicar(decimal num1, decimal num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculoService/Multiplicar", ReplyAction="http://tempuri.org/ICalculoService/MultiplicarResponse")]
        System.Threading.Tasks.Task<decimal> MultiplicarAsync(decimal num1, decimal num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculoService/Dividir", ReplyAction="http://tempuri.org/ICalculoService/DividirResponse")]
        decimal Dividir(decimal num1, decimal num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculoService/Dividir", ReplyAction="http://tempuri.org/ICalculoService/DividirResponse")]
        System.Threading.Tasks.Task<decimal> DividirAsync(decimal num1, decimal num2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculoServiceChannel : CalculadoraSOAPGUI.ServiceReference.ICalculoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculoServiceClient : System.ServiceModel.ClientBase<CalculadoraSOAPGUI.ServiceReference.ICalculoService>, CalculadoraSOAPGUI.ServiceReference.ICalculoService {
        
        public CalculoServiceClient() {
        }
        
        public CalculoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public decimal Somar(decimal num1, decimal num2) {
            return base.Channel.Somar(num1, num2);
        }
        
        public System.Threading.Tasks.Task<decimal> SomarAsync(decimal num1, decimal num2) {
            return base.Channel.SomarAsync(num1, num2);
        }
        
        public decimal Subtrair(decimal num1, decimal num2) {
            return base.Channel.Subtrair(num1, num2);
        }
        
        public System.Threading.Tasks.Task<decimal> SubtrairAsync(decimal num1, decimal num2) {
            return base.Channel.SubtrairAsync(num1, num2);
        }
        
        public decimal Multiplicar(decimal num1, decimal num2) {
            return base.Channel.Multiplicar(num1, num2);
        }
        
        public System.Threading.Tasks.Task<decimal> MultiplicarAsync(decimal num1, decimal num2) {
            return base.Channel.MultiplicarAsync(num1, num2);
        }
        
        public decimal Dividir(decimal num1, decimal num2) {
            return base.Channel.Dividir(num1, num2);
        }
        
        public System.Threading.Tasks.Task<decimal> DividirAsync(decimal num1, decimal num2) {
            return base.Channel.DividirAsync(num1, num2);
        }
    }
}
